generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id          String        @id @default(uuid())
  user_id     String
  name        String        @db.VarChar(50)
  phone       String        @db.VarChar(20)
  street      String        @db.Text
  country     String        @db.VarChar(100)
  province    String        @db.VarChar(100)
  city        String        @db.VarChar(100)
  subdistrict String        @db.VarChar(100)
  type_name   type_address  @default(HOME)
  postal_code String        @db.VarChar(20)
  is_default  Boolean       @default(false)
  created_at  DateTime      @default(now()) @db.Timestamp(0)
  updated_at  DateTime      @default(now()) @db.Timestamp(0)
  user        User          @relation(fields: [user_id], references: [id])
  transaction Transaction[]

  @@index([user_id])
  @@map("addresses")
}

model Brand {
  id         String      @id @default(uuid())
  name       String      @db.VarChar(150)
  image_url  String
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @default(now()) @db.Timestamp(0)
  product    Product[]
  status     status_type @default(ACTIVE)

  @@map("brands")
}

model ShoppingCart {
  id         String   @id @default(uuid())
  user_id    String
  product_id String
  variant_id String?
  qty        Int
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  product    Product  @relation(fields: [product_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
  variant    Variant? @relation(fields: [variant_id], references: [id])

  @@index([user_id])
  @@index([product_id])
  @@map("shopping_cart")
}

model Product {
  id                 String             @id @default(uuid())
  brand_id           String
  category_id        String
  slug               String?
  name               String
  price              Int?
  description        String             @db.Text
  stock_sold         Int?               @default(0)
  weight             Int
  stock              Int?
  is_featured        Boolean            @default(false)
  is_archived        Boolean            @default(false)
  is_variant         Boolean            @default(false)
  status             status_type        @default(ACTIVE)
  created_at         DateTime           @default(now()) @db.Timestamp(0)
  updated_at         DateTime           @default(now()) @db.Timestamp(0)
  images             Image[]
  brand              Brand              @relation(fields: [brand_id], references: [id])
  category           Category           @relation("CategoryToProduct", fields: [category_id], references: [id])
  reviews            Review[]
  shopping_cart      ShoppingCart[]
  transactions_items TransactionsItem[]
  variant            Variant[]
  wishlist           Wishlist[]

  @@index([category_id])
  @@index([brand_id])
  @@map("products")
}

model Wishlist {
  id         String   @id @default(uuid())
  product_id String
  user_id    String
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  User       User     @relation(fields: [user_id], references: [id])
  Product    Product  @relation(fields: [product_id], references: [id])

  @@index([user_id])
  @@index([product_id])
  @@map("wishlist")
}

model Transaction {
  id                 String              @id @default(uuid())
  total_price        Int
  status             transactions_status
  user_id            String
  address_id         String
  customer_name      String              @db.VarChar(255)
  customer_email     String              @db.VarChar(255)
  snap_token         String?             @db.VarChar(255)
  snap_redirect_url  String?             @db.VarChar(255)
  payment_method     String?             @db.VarChar(110)
  courier            String?             @db.VarChar(255)
  shipping_method    String?
  shipping_cost      Int?
  created_at         DateTime            @default(now()) @db.Timestamp(0)
  updated_at         DateTime            @default(now()) @db.Timestamp(0)
  address            Address             @relation(fields: [address_id], references: [id])
  user               User                @relation(fields: [user_id], references: [id])
  transactions_items TransactionsItem[]

  @@index([user_id])
  @@index([address_id])
  @@map("transactions")
}

model TransactionsItem {
  id             String      @id @default(uuid())
  transaction_id String      @db.VarChar(110)
  product_id     String      @db.VarChar(110)
  variant_id     String?     @db.VarChar(110)
  product_name   String      @db.VarChar(255)
  variant_name   String?     @db.VarChar(255)
  price          Int
  quantity       Int
  total_price    Int
  created_at     DateTime    @default(now()) @db.Timestamp(0)
  updated_at     DateTime    @default(now()) @db.Timestamp(0)
  transactions   Transaction @relation(fields: [transaction_id], references: [id], onUpdate: Restrict)
  products       Product     @relation(fields: [product_id], references: [id], onUpdate: Restrict)
  variant        Variant?    @relation(fields: [variant_id], references: [id])
  Review         Review[]

  @@index([product_id], map: "product_id")
  @@index([transaction_id], map: "transaction_id")
  @@map("transactions_items")
}

model Billboard {
  id         String      @id @default(uuid())
  label      String
  image_url  String      @default("")
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @default(now()) @db.Timestamp(0)
  categories Category[]
  status     status_type @default(ACTIVE)

  @@map("billboards")
}

model Category {
  id           String      @id @default(uuid())
  billboard_id String
  name         String
  created_at   DateTime    @default(now()) @db.Timestamp(0)
  updated_at   DateTime    @default(now()) @db.Timestamp(0)
  billboard    Billboard   @relation(fields: [billboard_id], references: [id])
  products     Product[]   @relation("CategoryToProduct")
  status       status_type @default(ACTIVE)

  @@index([billboard_id])
  @@map("category")
}

model Variant {
  id               String             @id @default(uuid())
  product_id       String
  name             String
  value            String
  image_url        String
  price            Int
  stock            Int
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @db.Timestamp(0)
  products         Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  status           status_type        @default(ACTIVE)
  ShoppingCart     ShoppingCart[]
  TransactionsItem TransactionsItem[]

  @@map("variants")
}

model Image {
  id         String   @id @default(uuid())
  product_id String
  url        String   @db.Text
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@map("images")
}

model Review {
  id                   String           @id @default(uuid())
  product_id           String
  user_id              String
  transactions_item_id String
  rating               Int
  message              String?          @db.Text
  created_at           DateTime         @default(now()) @db.Timestamp(0)
  updated_at           DateTime         @default(now()) @db.Timestamp(0)
  Product              Product          @relation(fields: [product_id], references: [id])
  User                 User             @relation(fields: [user_id], references: [id])
  TransactionItem      TransactionsItem @relation(fields: [transactions_item_id], references: [id])

  @@index([product_id])
  @@index([user_id])
  @@map("reviews")
}

model User {
  id                   String         @id @unique @default(uuid())
  username             String         @unique @db.VarChar(75)
  role                 user_role      @default(USER)
  full_name            String         @db.VarChar(100)
  email                String         @unique @db.VarChar(100)
  password             String         @db.VarChar(200)
  photo                String?        @db.Text
  refresh_token        String?        @db.Text
  verified             Boolean?       @default(false)
  status               status_type?   @default(ACTIVE)
  verification_code    String?        @unique @db.Text
  provider             String?        @default("local")
  password_reset_token String?
  password_reset_At    DateTime?
  created_at           DateTime       @default(now()) @db.Timestamp(0)
  updated_at           DateTime       @default(now()) @db.Timestamp(0)
  address              Address[]
  review               Review[]
  shopping_cart        ShoppingCart[]
  transaction          Transaction[]
  wishlist             Wishlist[]

  @@map("users")
}

enum transactions_status {
  PENDING_PAYMENT
  PAID
  CANCELED
  SHIPPING
  DELIVERED
}

enum status_type {
  ACTIVE
  INACTIVE
}

enum user_role {
  ADMIN
  USER
  OWNER
}

enum type_address {
  HOME
  OFFICE
}
